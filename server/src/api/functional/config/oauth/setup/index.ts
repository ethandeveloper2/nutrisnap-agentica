/**
 * @packageDocumentation
 * @module api.functional.config.oauth.setup
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IConfigController } from "../../../../../controllers/config/ConfigController";

/**
 * Set up OAuth tokens for Google services
 *
 * @param input OAuth configuration data
 * @summary Configure Google OAuth refresh token
 * @returns Setup result
 *
 * @controller ConfigController.setupOAuth
 * @path POST /config/oauth/setup
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function setupOAuth(
  connection: IConnection,
  input: setupOAuth.Body,
): Promise<setupOAuth.Output> {
  return true === connection.simulate
    ? setupOAuth.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...setupOAuth.METADATA,
          template: setupOAuth.METADATA.path,
          path: setupOAuth.path(),
        },
        input,
      );
}
export namespace setupOAuth {
  export type Body = IConfigController.IOAuthSetupRequest;
  export type Output = IConfigController.IOAuthSetupResponse;

  export const METADATA = {
    method: "POST",
    path: "/config/oauth/setup",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/config/oauth/setup";
  export const random = (): IConfigController.IOAuthSetupResponse =>
    typia.random<IConfigController.IOAuthSetupResponse>();
  export const simulate = (connection: IConnection, input: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random();
  };
}
