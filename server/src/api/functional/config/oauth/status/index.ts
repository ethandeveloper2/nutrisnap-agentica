/**
 * @packageDocumentation
 * @module api.functional.config.oauth.status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IConfigController } from "../../../../../controllers/config/ConfigController";

/**
 * Check OAuth configuration status
 *
 * @summary Get current OAuth status
 * @returns OAuth configuration status
 *
 * @controller ConfigController.getOAuthStatus
 * @path GET /config/oauth/status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getOAuthStatus(
  connection: IConnection,
): Promise<getOAuthStatus.Output> {
  return true === connection.simulate
    ? getOAuthStatus.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getOAuthStatus.METADATA,
        template: getOAuthStatus.METADATA.path,
        path: getOAuthStatus.path(),
      });
}
export namespace getOAuthStatus {
  export type Output = IConfigController.IOAuthStatusResponse;

  export const METADATA = {
    method: "GET",
    path: "/config/oauth/status",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/config/oauth/status";
  export const random = (): IConfigController.IOAuthStatusResponse =>
    typia.random<IConfigController.IOAuthStatusResponse>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
