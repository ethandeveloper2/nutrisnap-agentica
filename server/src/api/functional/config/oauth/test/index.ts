/**
 * @packageDocumentation
 * @module api.functional.config.oauth.test
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * Test Google services connection
 *
 * @summary Test Google API connectivity
 * @returns Connection test result
 *
 * @controller ConfigController.testConnection
 * @path POST /config/oauth/test
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function testConnection(
  connection: IConnection,
): Promise<testConnection.Output> {
  return true === connection.simulate
    ? testConnection.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...testConnection.METADATA,
        template: testConnection.METADATA.path,
        path: testConnection.path(),
      });
}
export namespace testConnection {
  export type Output = {
    success: boolean;
    message: string;
    services: Record<string, boolean>;
  };

  export const METADATA = {
    method: "POST",
    path: "/config/oauth/test",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/config/oauth/test";
  export const random = (): {
    success: boolean;
    message: string;
    services: Record<string, boolean>;
  } =>
    typia.random<{
      success: boolean;
      message: string;
      services: Record<string, boolean>;
    }>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
